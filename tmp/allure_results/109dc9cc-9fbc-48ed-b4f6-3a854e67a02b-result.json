{"name": "Проверка возможности оформления заказа авторизованным пользователем", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_main_page.TestMainPage object at 0x000001ACC6756190>, pages = <pages.UIWorkerWeb object at 0x000001ACC6733C50>, login_user = <pages.UIWorkerWeb object at 0x000001ACC6733C50>\n\n    @allure.title('Проверка возможности оформления заказа авторизованным пользователем')\n    def test_successful_order(self, pages, login_user):\n        pages.add_ingredient_to_order()\n        pages.click_confirm_button()\n>       order_id = pages.get_order_id()\n                   ^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_main_page.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:65: in get_order_id\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9c7657fc-e143-4053-b40c-84970fc510f2\")>, method = <function MainPage.get_order_id.<locals>.<lambda> at 0x000001ACC688D3A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Добавить ингредиент в заказ", "status": "passed", "start": 1759682140098, "stop": 1759682140651}, {"name": "Кликнуть на кнопку \"Оформить заказ\"", "status": "passed", "start": 1759682140651, "stop": 1759682140717}, {"name": "Получить номер заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\Zdravcity-User\\ya-practicum\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Zdravcity-User\\ya-practicum\\Diplom\\Diplom_3\\pages\\main_page.py\", line 65, in get_order_id\n    self.wait.until(\n    ~~~~~~~~~~~~~~~^\n        lambda _: self.get_element_text(MainPageLocators.ORDER_ID) != '9999'\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Zdravcity-User\\ya-practicum\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1759682140717, "stop": 1759682151015}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1759682140098, "stop": 1759682151017, "uuid": "dbb62424-1162-4f82-bd4a-0322bd440934", "historyId": "3f06e0085101fc0a436a64549d9ef51b", "testCaseId": "d1753ccba30592f56518d638a94c4cb0", "fullName": "tests.test_main_page.TestMainPage#test_successful_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "DESKTOP-1UM8KQP"}, {"name": "thread", "value": "6812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page"}], "titlePath": ["tests", "test_main_page.py", "TestMainPage"]}